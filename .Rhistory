install.packages("roxygen2")
library(devtools)
library(roxygen2)
devtools::load_all()
devtools::load_all()
roxygenise();
install.packages("desc")
roxygenise();
library(roxygen2)
library(devtools)
roxygenise();
roxygenise();
roxygenise();
roxygenise();
roxygenise();
devtools::document()
devtools::load_all()
devtools::install("biokNN")
devtools::install()
library(biokNN)
library(dplyr)
library(mice)
library(impute)
library(lme4)
library(cluster)
#Parameters
prop_miss <- 0.3
prop_valid <- 0.1
amp_method <- "MCAR"
clust_var <- "V1"       # need name of clustering variable
df <- read.csv(file = "datasets/machine.csv", header = F) %>%
select(-V2) %>% select(clust_var, everything()) %>% mutate(V11 = sample(V1), V12 = sample(V1))
library(dplyr)
library(mice)
library(impute)
library(lme4)
library(cluster)
library(ggplot2)
library(miceadds)
library(micemd)
library(MuMIn)
nClusters <- c(25)
#sizeCluster <- 25
sigma2 <- 1
beta0_orig <- 1
beta1_orig <- 1
tau1_orig <- 1
tau0_orig <- 3
alpha <- 0.9#seq(0, 1, 0.1)
knn <- 10#seq(5, 20, 50)
SD <- c(12, 25, 50)
prop_miss <- c(0.3)
amp_method <- "MCAR"
clust_var <- "clust"
nIter <- 20
nSim <- 100
nAmpute <- 1
nRuns <- 1
impute_2l <- function(df_miss, method){
d <- df_miss
d[[1]] <- as.numeric(factor(d[[1]]))
pred <- make.predictorMatrix.multi(d)
meth <- get.methods.2l(method, df_miss)
imp <- complete(mice(d, pred = pred, meth = meth, print = FALSE))
imp
}
get.results.bias <- function(imp, beta0, beta1, tau0, tau1){
true_beta0 <- beta0
true_beta1 <- beta1
true_tau0 <- tau0
true_tau1 <- tau1
fit <- lmer(y ~ X1 + (X1 | clust), imp)
tab <- coef(summary(fit))
beta_0 <- tab[1,1]
beta_0_low <- beta_0 - 1.96*tab[1,2]
beta_0_high <- beta_0 + 1.96*tab[1,2]
beta_1 <- tab[2,1]
beta_1_low <- beta_1 - 1.96*tab[2,2]
beta_1_high <- beta_1 + 1.96*tab[2,2]
tau_0 <- as.data.frame(summary(fit)$varcor)[1,'sdcor']
tau_1 <- as.data.frame(summary(fit)$varcor)[2,'sdcor']
r2 <- r.squaredGLMM(fit)
res0 <- get.metrics(c(beta_0, beta_0_low, beta_0_high), true_beta0)
res1 <- get.metrics(c(beta_1, beta_1_low, beta_1_high), true_beta1)
res2 <- get.metrics(c(tau_0, 0, 1), true_tau0)
res3 <- get.metrics(c(tau_1, 0, 1), true_tau1)
res <- rbind(res0, res1, res2, res3) %>% mutate(r2_marg = r2[1], r2_com = r2[2],estimate = c("beta0", "beta1", "tau0", "tau1")) %>% select(estimate, everything())
as.matrix(res)
}
get.metrics <- function(tab, true){
RB <- tab[1] - true
PB <- 100 * abs(tab[1] - true)/ true
CR <- ifelse((tab[2] < true & true < tab[3]) == TRUE, 1, 0)
AW <- tab[3] - tab[2]
RMSE <- sqrt((tab[1] - true)^2)
data.frame(RB, PB, CR, AW, RMSE)
}
create.data <- function(nCluster, sizeCluster, beta0, tau0, beta, tau, sigma2){
clust <- gl(nClusters, k = sizeCluster)
beta0_j <- rep(rnorm(nClusters, beta0, tau0), each = sizeCluster)
beta1_j <- rep(rnorm(nClusters, beta[1], tau[1]), each = sizeCluster)
# beta2_j <- rep(rnorm(nClusters, beta[2], tau[2]), each = sizeCluster)
# beta3_j <- rep(rnorm(nClusters, beta[3], tau[3]), each = sizeCluster)
# beta4_j <- rep(rnorm(nClusters, beta[4], tau[4]), each = sizeCluster)
X1 <- rnorm(nClusters * sizeCluster)
# X2 <- rnorm(nClusters * sizeCluster)
# X3 <- rnorm(nClusters * sizeCluster)
# X4 <- rnorm(nClusters * sizeCluster)
error <- rnorm(nClusters * sizeCluster, mean = 0, sd = sigma2)
y <- beta0_j + beta1_j*X1 + error # beta2_j*X2 + beta3_j*X3 + beta4_j*X4
df <- data.frame(clust, y,X1) #  X2, X3, X4,
df
}
create.data.multivar <- function(p, nCluster, sizeCluster, beta0, tau0, beta, tau, sigma2){
clust <- gl(nClusters, k = sizeCluster)
n <- nClusters * sizeCluster
beta0_j <- rep(rnorm(nClusters, beta0, tau0), each = sizeCluster)
betas <- matrix(nrow = n, ncol = p)
for(i in 1:p){
betas[ , i] <- rep(rnorm(nClusters, beta[i], tau[i]), each = sizeCluster)
}
Xs <- matrix(nrow = n, ncol = p)
for(i in 1:p){
Xs[ , i] <- rnorm(n)
}
error <- rnorm(n, mean = 0, sd = sigma2)
y <- beta0_j + error
for(j in 1:p){
y <- y + betas[ ,j]*Xs[ ,j]
}
df <- data.frame(clust, y, Xs)
df
}
create.unbalanced.data <- function(nCluster, SD, beta0, tau0, beta, tau, sigma2) {
sizeCluster <- as.integer(rnorm(nClusters, mean = 25, sd = SD))
sizeCluster[sizeCluster<=5] <- 5
clust <- c()
beta0_j <- c()
beta1_j <- c()
i <- 1
for(k in sizeCluster){
clust <- c(clust, rep(i, k))
beta0_j <- c(beta0_j, rep(rnorm(1, beta0, tau0), k))
beta1_j <- c(beta1_j, rep(rnorm(1, beta[1], tau[1]), k))
i <- i + 1
}
X1 <- rnorm(sum(sizeCluster))
error <- rnorm(sum(sizeCluster), mean = 0, sd = sigma2)
y <- beta0_j + beta1_j*X1 + error
df <- data.frame(clust, y,X1) %>% mutate(clust = as.factor(clust))
df
}
create.logistic.data <-  function(nCluster, sizeCluster, beta0, tau0, beta, tau, sigma2) {
clust <- gl(nClusters, k = sizeCluster)
beta0_j <- rep(rnorm(nClusters, beta0, tau0), each = sizeCluster)
beta1_j <- rep(rnorm(nClusters, beta[1], tau[1]), each = sizeCluster)
X1 <- rnorm(nClusters * sizeCluster)
error <- rnorm(nClusters * sizeCluster, mean = 0, sd = sigma2)
eta <- beta0_j + beta1_j*X1 + error
#p <- exp(eta) / (1 + exp(eta))
#y <- ifelse(p< 0.5, 0, 1)
p = 1 / (1 + exp(-eta))
y = rbinom(n = nClusters * sizeCluster, size = 1, prob = p)
data.frame(clust, X1, y) %>% mutate(y = as.factor(y))
}
df_obs <- create.unbalanced.data(nClusters, sd, beta0_orig, tau0_orig, beta1_orig, tau1_orig, sigma2)
df_obs <- create.unbalanced.data(nClusters, 12, beta0_orig, tau0_orig, beta1_orig, tau1_orig, sigma2)
clust_var <- df_obs$clust
df_obs$clust <- NULL
df_amp <- ampute(df_obs, prop = prop_miss, mech = amp_method)
df_miss <- df_amp$amp
df_miss$clust <- clust_var
df_miss <- df_miss %>% select(clust, everything())
df_obs <- df_obs %>% mutate(clust = clust_var) %>% select(clust, everything())
x <- biokNN.impute(df_miss, 'clust')
devtools::load_all()
devtools::install()
library(biokNN)
x <- biokNN.impute(df_miss, 'clust')
devtools::load_all()
devtools::install()
library(biokNN)
x <- biokNN.impute(df_miss, 'clust')
View(x)
?biokNN.impute
?biokNN.impute
help("biokNN.impute")
devtools::document()
devtools::document()
?biokNN.impute
create.multilevel <- function(nClass = 10, nVars = 1, classSD = 10, beta0 = 0, tau0 = 1, beta = c(1), tau = c(1), sigma2 = 1) {
sizeCluster <- as.integer(rnorm(nClusters, mean = 25, sd = SD))
sizeCluster[sizeCluster<=5] <- 5
clust <- c()
beta0_j <- c()
n <- sum(sizeCluster)
X.df <- matrix(nrow = n, ncol = nVars)
i <- 1
for(k in sizeCluster){
clust <- c(clust, rep(i, k))
beta0_j <- c(beta0_j, rep(rnorm(1, beta0, tau0), k))
i <- i + 1
}
error <- rnorm(n, mean = 0, sd = sigma2)
y <- beta0_j + error
for(j in 1:nVars){
beta_j <- c()
for(k in sizeCluster){
beta_j <- c(beta_j, rep(rnorm(1, beta[j], tau[j]), k))
}
X <- rnorm(n)
X.df[ ,j] <- X
y <- y + beta_j*X
}
df <- data.frame(clust, y, X.df) %>% mutate(clust = as.factor(clust))
df
}
create.multilevel()
create.multilevel(nVars = 3)
create.multilevel(nVars = 3, beta = c(1,1,1), tau = c(1,1,1))
devtools::document()
library(biokNN)
?create.multilevel
df <- df_miss
df %>% dplyr::group_by(className) %>%
summarise_at(-c(className), miss = sum(is.na()))
className <- 'clust'
df %>% dplyr::group_by(className) %>%
summarise_at(-c(className), miss = sum(is.na()))
className
df %>% dplyr::group_by('clust') %>%
summarise_at(-c('clust'), miss = sum(is.na()))
df %>% dplyr::group_by('clust') %>%
summarise_at(-c(clust), miss = sum(is.na()))
df %>% dplyr::group_by('clust') %>%
summarise_at(-c(clust), miss = sum(is.na()))
df %>% dplyr::group_by(clust) %>%
summarise_at(-clust, miss = sum(is.na()))
df %>% dplyr::group_by(className) %>%
summarise_each(miss = sum(is.na()), className)
df %>% dplyr::group_by(clust) %>%
summarise_each(miss = sum(is.na()), clust)
df %>% dplyr::group_by(clust) %>%
summarise_each(miss = sum(is.na(.x)), clust)
df %>% dplyr::group_by(clust) %>%
summarise_each(miss = ~sum(is.na(.x)), clust)
df %>% dplyr::group_by(clust) %>%
summarise(across(where(is.numeric), sum(is.na())))
library(dplyr)
df %>% dplyr::group_by(clust) %>%
summarise(across(where(is.numeric), sum(is.na())))
df %>% dplyr::group_by(clust) %>%
summarise_if(is.numeric, sum(is.na()))
df %>% dplyr::group_by(clust) %>%
summarise_if(is.numeric, sum(is.na(.x)))
df %>% dplyr::group_by(clust) %>%
summarise_if(is.numeric, sum(is.na))
df %>% dplyr::group_by(clust) %>%
summarise_if(is.numeric, ~sum(is.na(.x)))
table(df$clust)
as.data.frame(t(table(df$clust)))
as.data.frame(t(table(df$clust)))
t(table(df$clust))
as.data.frame(table(df$clust))
missClust <- df %>% dplyr::group_by(clust) %>%
summarise_if(is.numeric, ~sum(is.na(.x)))
View(missClust)
missClust <- df %>% dplyr::group_by(clust) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
dplyr::gather(var, value, -className)
missClust <- df %>% dplyr::group_by(clust) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -className)
View(missClust)
ggplot2::ggplot(missClust) +
geom_bar(aes(x = clust, y = value), stat="identity") +
facet_wrap(~var)
ggplot2::ggplot(missClust) +
geom_bar(aes(x = clust, y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values")
ggplot2::ggplot(missClust) +
geom_bar(aes(x = clust, y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values") +
theme_bw()
plot.missing <- function(df, className){
sizeClust <- as.data.frame(table(df$clust))
missClust <- df %>% dplyr::group_by(className) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -className)
g <- ggplot2::ggplot(missClust) +
geom_bar(aes(x = className, y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values") +
theme_bw()
g
}
plot.missing(df_miss, 'clust')
colnames(df %>% dplyr::select_if(~!is.numeric(.x)))
#' @importFrom magrittr %>%
plot.missing <- function(df){
className <- colnames(df %>% dplyr::select_if(~!is.numeric(.x)))
sizeClust <- as.data.frame(table(df$clust))
missClust <- df %>% dplyr::group_by(className) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -className)
g <- ggplot2::ggplot(missClust) +
geom_bar(aes(x = className, y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values") +
theme_bw()
g
}
plot.missing(df_miss)
className <- colnames(df %>% dplyr::select_if(~!is.numeric(.x)))
#' @importFrom magrittr %>%
plot.missing <- function(df){
className <- colnames(df %>% dplyr::select_if(~!is.numeric(.x)))
missClust <- df %>% dplyr::group_by(eval(parse(className))) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -eval(parse(className)))
g <- ggplot2::ggplot(missClust) +
geom_bar(aes(x = eval(parse(className)), y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values") +
theme_bw()
g
}
plot.missing(df_miss)
as.name(className)
missClust <- df %>% dplyr::group_by(as.name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -as.name(className))
df %>% dplyr::group_by(!!quo_name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x)))
missClust <- df %>% dplyr::group_by(!!quo_name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -!!quo_name(className))
className <- as.name(colnames(df %>% dplyr::select_if(~!is.numeric(.x))))
missClust <- df %>% dplyr::group_by(!!quo_name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -!!quo_name(className))
missClust <- df %>% dplyr::group_by(!!quo_name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x)))
missClust <- df %>% dplyr::group_by(!!quo_name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -!!className)
df %>% dplyr::group_by(!!quo_name(className)) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x)))
#' @importFrom magrittr %>%
plot.missing <- function(df, className){
missClust <- df %>% dplyr::group_by(className) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -className)
g <- ggplot2::ggplot(missClust) +
geom_bar(aes(x = className, y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values") +
theme_bw()
g
}
plot.missing(df_miss, clust)
plot.missing(df_miss, 'clust')
df_miss %>% rename(clust = className)
df_miss %>% rename(className = clust)
df_miss <- df_miss %>% rename(className = clust)
#' @importFrom magrittr %>%
plot.missing <- function(df, className){
missClust <- df %>% dplyr::group_by(className) %>%
dplyr::summarise_if(is.numeric, ~sum(is.na(.x))) %>%
tidyr::gather(var, value, -className)
g <- ggplot2::ggplot(missClust) +
geom_bar(aes(x = className, y = value), stat="identity") +
facet_wrap(~var)+
labs(x = "Class", y ="Number of missing values") +
theme_bw()
g
}
plot.missing(df_miss, className)
devtools::document()
devtools::load_all()
devtools::install_github("mcubillos3/biokNN")
devtools::install_github("mcubillos3/biokNN")
install.packages("rticles")
library(rticles)
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
?rmarkdown::pandoc_available
pandoc_version()
library(rmarkdown)
pandoc_available()
pandoc_version()
